// <auto-generated />
using System;
using ExerciseTracker.DataAccess.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExerciseTracker.DataAccess.Migrations
{
    [DbContext(typeof(ExerciseDbContext))]
    partial class ExerciseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExerciseTracker.Domain.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("ExerciseType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasDiscriminator<string>("ExerciseType").HasValue("Exercise");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ExerciseTracker.Domain.Models.CardioExercise", b =>
                {
                    b.HasBaseType("ExerciseTracker.Domain.Models.Exercise");

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("Pace")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("Cardio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Morning jog",
                            DateEnd = new DateTime(2023, 7, 1, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2023, 7, 1, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Distance = 3.5f,
                            Pace = new TimeSpan(0, 0, 8, 34, 0)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Evening bike ride",
                            DateEnd = new DateTime(2023, 7, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2023, 7, 3, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Distance = 15f,
                            Pace = new TimeSpan(0, 0, 4, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Swimming",
                            DateEnd = new DateTime(2023, 7, 5, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2023, 7, 5, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Distance = 2f,
                            Pace = new TimeSpan(0, 0, 30, 0, 0)
                        });
                });

            modelBuilder.Entity("ExerciseTracker.Domain.Models.WeightExercise", b =>
                {
                    b.HasBaseType("ExerciseTracker.Domain.Models.Exercise");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasDiscriminator().HasValue("Weight");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Comments = "Chest day",
                            DateEnd = new DateTime(2023, 7, 2, 16, 45, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2023, 7, 2, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            Reps = 8,
                            Sets = 3,
                            Weight = 135f
                        },
                        new
                        {
                            Id = 5,
                            Comments = "Leg day",
                            DateEnd = new DateTime(2023, 7, 4, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2023, 7, 4, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Reps = 6,
                            Sets = 4,
                            Weight = 225f
                        },
                        new
                        {
                            Id = 6,
                            Comments = "Arms",
                            DateEnd = new DateTime(2023, 7, 6, 16, 15, 0, 0, DateTimeKind.Unspecified),
                            DateStart = new DateTime(2023, 7, 6, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            Reps = 12,
                            Sets = 3,
                            Weight = 50f
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
